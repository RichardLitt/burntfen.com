I"ß
<p>I read a pretty good article in Wired recently, <a href="http://www.wired.com/2014/05/the-world-of-computer-go/">The Mystery of Go, the Ancient Game that Computers Still Canâ€™t Win</a>. If you didnâ€™t know, Go is an incredible chess-like game played mainly in Japan. In it, Remi Coulomâ€™s computer program that heâ€™s used to win some computer-vs-computer Go games is discussed, as is Remiâ€™s interest in the game and a history of the game itself. I suggest you read it rather than having me summarize it.</p>

<p>In particular, they talk about how the best programs that can play Go (Not Go programs - Go is a programming language, as well as an awesome game) use Monte Carlo Markov Chains. That makes sense, because you can cut down on the amount of time needed to search possible paths for the game to play. I used to use Markov chains for my undergraduate thesis, modeling how 8-month-old children learn word boundaries when they donâ€™t know individual words.</p>

<p>My question here is; is this really the best way? To try and gamify the search space, so that you donâ€™t have to do so many calculations?</p>

<p>I think thereâ€™s possibly another way to do it. You view the board as a map. Then, you apply the old logic of Sun Tzu and the Art of War, and learn the territory. Stay updated. Take a birds eye view. Hereâ€™s what Iâ€™m thinking; instead of using the possible points on the board, model the board as topographical zones, or colors, or as water with boundaries. Then, fuzz the boundaries between the points; look at where the crucial choke points are, at the heat. Donâ€™t use the computer to simply do the odds of calculations; try and teach the computer to view the board as a whole.</p>

<p>Then do Markov chains. Then win.</p>
:ET